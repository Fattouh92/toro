<% if @cheque != [] %>
<% if @items != nil %>
<script type="text/javascript">
      function findPrinter(x) {
         var applet = document.jzebra;
         if (applet != null) {
            // Searches for locally installed printer with "zebra" in the name
            applet.findPrinter(x);
         }
         
         // *Note:  monitorFinding() still works but is too complicated and
         // outdated.  Instead create a JavaScript  function called 
         // "jzebraDoneFinding()" and handle your next steps there.
         monitorFinding();
      }

      function findPrinters() {
         var applet = document.jzebra;
         if (applet != null) {
            // Searches for locally installed printer with "zebra" in the name
            applet.findPrinter("\\{dummy printer name for listing\\}");
         }

         monitorFinding2();
      }

      function print123(printer, array1, array2, place, num) {
        mutex = false;
         var applet = document.jzebra;
         if (applet != null) {
            findPrinter(printer);
            // Send characters/raw commands to applet using "append"
            // Hint:  Carriage Return = \r, New Line = \n, Escape Double Quotes= \"
            applet.append("Table: "+ place+num+"\n");
            for (var i = 0; i < array1.length; i++) {
              applet.append(array1[i]+" "+array2[i]+"\n");
            }        
            // Send characters/raw commands to printer
            applet.append("\n\n\n\n\n\n\n\n\n\n");
            applet.print();
    }
    
         // *Note:  monitorPrinting() still works but is too complicated and
         // outdated.  Instead create a JavaScript  function called 
         // "jzebraDonePrinting()" and handle your next steps there.
    monitorPrinting();
         
      }
      
      
            function chr(i) {
         return String.fromCharCode(i);
      }
      
      // *Note:  monitorPrinting() still works but is too complicated and
      // outdated.  Instead create a JavaScript  function called 
      // "jzebraDonePrinting()" and handle your next steps there.
      function monitorPrinting() {
   var applet = document.jzebra;
   if (applet != null) {
      if (!applet.isDonePrinting()) {
         window.setTimeout('monitorPrinting()', 100);
      } else {
         var e = applet.getException();
         alert(e == null ? "Printed Successfully" : "Exception occured: " + e.getLocalizedMessage());
      }
   } else {
            alert("Applet not loaded!");
        }
      }
      
      function monitorFinding() {
   var applet = document.jzebra;
   if (applet != null) {
      if (!applet.isDoneFinding()) {
         window.setTimeout('monitorFinding()', 100);
      } else {
         var printer = applet.getPrinter();
              alert(printer == null ? "Printer not found" : "Printer \"" + printer + "\" found");
      }
   } else {
            alert("Applet not loaded!");
        }
      }

      function monitorFinding2() {
   var applet = document.jzebra;
   if (applet != null) {
      if (!applet.isDoneFinding()) {
         window.setTimeout('monitorFinding2()', 100);
      } else {
              var printersCSV = applet.getPrinters();
              var printers = printersCSV.split(",");
              for (p in printers) {
                  alert(printers[p]);
              }
              
      }
   } else {
            alert("Applet not loaded!");
        }
      }
      
      // *Note:  monitorAppending() still works but is too complicated and
      // outdated.  Instead create a JavaScript  function called 
      // "jzebraDoneAppending()" and handle your next steps there.
      function monitorAppending() {
   var applet = document.jzebra;
   if (applet != null) {
      if (!applet.isDoneAppending()) {
         window.setTimeout('monitorAppending()', 100);
      } else {
         applet.print(); // Don't print until all of the data has been appended
              
              // *Note:  monitorPrinting() still works but is too complicated and
              // outdated.  Instead create a JavaScript  function called 
              // "jzebraDonePrinting()" and handle your next steps there.
              monitorPrinting();
      }
   } else {
            alert("Applet not loaded!");
        }
      }

      // *Note:  monitorAppending2() still works but is too complicated and
      // outdated.  Instead create a JavaScript  function called 
      // "jzebraDoneAppending()" and handle your next steps there.
      function monitorAppending2() {
   var applet = document.jzebra;
   if (applet != null) {
      if (!applet.isDoneAppending()) {
         window.setTimeout('monitorAppending2()', 100);
      } else {
         applet.printPS(); // Don't print until all of the image data has been appended
              
              // *Note:  monitorPrinting() still works but is too complicated and
              // outdated.  Instead create a JavaScript  function called 
              // "jzebraDonePrinting()" and handle your next steps there.
              monitorPrinting();
      }
   } else {
            alert("Applet not loaded!");
        }
      }
      
      // *Note:  monitorAppending3() still works but is too complicated and
      // outdated.  Instead create a JavaScript  function called 
      // "jzebraDoneAppending()" and handle your next steps there.
      function monitorAppending3() {
   var applet = document.jzebra;
   if (applet != null) {
      if (!applet.isDoneAppending()) {
         window.setTimeout('monitorAppending3()', 100);
      } else {
         applet.printHTML(); // Don't print until all of the image data has been appended
              
              
              // *Note:  monitorPrinting() still works but is too complicated and
              // outdated.  Instead create a JavaScript  function called 
              // "jzebraDonePrinting()" and handle your next steps there.
              monitorPrinting();
      }
   } else {
            alert("Applet not loaded!");
        }
      }
      
      function useDefaultPrinter() {
         var applet = document.jzebra;
         if (applet != null) {
            // Searches for default printer
            applet.findPrinter();
         }
         
         monitorFinding();
      }
      
      function jzebraReady() {
          // Change title to reflect version
          var applet = document.jzebra;
          var title = document.getElementById("title");
          if (applet != null) {
              title.innerHTML = title.innerHTML + " " + applet.getVersion();
              document.getElementById("content").style.background = "#F0F0F0";
          }
      }
      
      /**
       * By default, jZebra prevents multiple instances of the applet's main 
       * JavaScript listener thread to start up.  This can cause problems if
       * you have jZebra loaded on multiple pages at once. 
       * 
       * The downside to this is Internet Explorer has a tendency to initilize the
       * applet multiple times, so use this setting with care.
       */
      function allowMultiple() {
          var applet = document.jzebra;
          if (applet != null) {
              var multiple = applet.getAllowMultipleInstances();
              applet.allowMultipleInstances(!multiple);
              alert('Allowing of multiple applet instances set to "' + !multiple + '"');
          }
      }
      
      function printPage() {
           $("#content").html2canvas({ 
                canvas: hidden_screenshot,
                onrendered: function() {printBase64Image($("canvas")[0].toDataURL('image/png'));}
           });
      }
      
      
      function logFeatures() {
          if (document.jzebra != null) {
              var applet = document.jzebra;
              var logging = applet.getLogPostScriptFeatures();
              applet.setLogPostScriptFeatures(!logging);
              alert('Logging of PostScript printer capabilities to console set to "' + !logging + '"');
          }
      }
   
      function useAlternatePrinting() {
          var applet = document.jzebra;
          if (applet != null) {
              var alternate = applet.isAlternatePrinting();
              applet.useAlternatePrinting(!alternate);
              alert('Alternate CUPS printing set to "' + !alternate + '"');
          }
      }

window.onload = function () {
  var applet = document.jzebra;
  if (<%= @kitchenq.to_json.html_safe %>.length != 0 ){
    print123("kitchen", <%=@kitchenq.to_json.html_safe%>, <%=@kitchen.to_json.html_safe%>, <%=@place.to_s.to_json.html_safe%>, <%=@num%>)
  }
  if (<%= @baristaq.to_json.html_safe %>.length != 0 ){
    print123("bar", <%=@baristaq.to_json.html_safe%>, <%=@barista.to_json.html_safe%>, <%=@place.to_s.to_json.html_safe%>, <%=@num%>)
  }
  if (<%= @shishaq.to_json.html_safe %>.length != 0 ){
    print123("shisha", <%=@shishaq.to_json.html_safe%>, <%=@shisha.to_json.html_safe%>, <%=@place.to_s.to_json.html_safe%>, <%=@num%>)
  }
}
</script>
<% end %>
<p>Move table:</p>
<%= form_tag("/tables/#{@tid}/move", :method => "post") do %>  
  <%= collection_select(:new_table,:table_id, Table.all, :id, :full_name, { prompt: true }) %>
  <br>
  <%= submit_tag "Move", class: "btn btn-success btn-large"%>
<% end %>
<h1>Table <%= Table.find(@tid).placement %> <%= Table.find(@tid).number %></h1>
  <br>
  <div class="tabbable tabs-top">
    <ul class="nav nav-tabs">
      <% @cheque.each do |ch| %>
        <% if ch.name == "" %>
          <li><a href="#<%= ch.id %>" data-toggle="tab">Cheque <%= ch.id %></a></li>
        <% else %>
          <li><a href="#<%= ch.id %>" data-toggle="tab">Cheque <%= ch.name %></a></li>
        <% end %>
      <% end %>
    </ul>
    <div class="tab-content">
      <% @cheque.each do |ch| %>
        <div class="tab-pane well" id="<%= ch.id %>">
          <table class="table table-condensed">
            <thead>
              <tr>
                <% if ch.captain_id != nil %>
                  <th><h2>Captain <%= User.find(ch.captain_id).firstname %> <%= User.find(ch.captain_id).lastname %></h2></th>
                <% end %>
              </tr>
            </thead>
          </table>        
          <% @orders = Order.where(check_id: ch.id).all %>
          <% @orders.each do |order| %>
            <% @counter = @counter + 1 %>
            <h2>Order <%= @counter %> <h4><%= order.created_at %></h4></h2>
        
            <h2>Items</h2>
            <% @items = []
            @tempItems = Itemorder.where(order_id: order.id)
            @tempItems.each do |temp|
              item_id_temp = temp.item_id
              @items << Item.find(item_id_temp)
            end %>
            <table class="table table-condensed table-bordered">
              <thead>
                <tr>
                  <th>name</th>
                  <th>arabic name</th>
                  <th>price</th>
                  <th>quantity</th>
                  <% if current_user.admin? %>
                    <th>delete 1 item</th>
                    <th>move 1 item</th>
                  <% end %>
                </tr>
              </thead>
              <tbody>
                <% @items.each do |item| %>
                  <div id="myModalDelete<%= item.id %>" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                    <div class="modal-header">
                      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                      <h3 id="myModalLabel">Item decrement</h3>
                    </div>
                    <div class="modal-body">
                      <p>Are you sure you want to decrease item quantity by 1?</p>
                      <div class="prize-view"></div>
                    </div>
                    <div class="modal-footer">
                      <button class="btn" data-dismiss="modal" aria-hidden="true">No, go back</button>
                      <a class="btn btn-danger" href="/<%=ch.id%>/<%=order.id%>/<%=item.id%>/decrement_quantity">delete</a>
                    </div>
                  </div>
                  <tr>
                    <th><%= item.name %></th>
                    <th><%= item.arabicname %></th>
                    <th><%= item.current_price %></th>>
                    <th><%=Itemorder.where(order_id: order.id, item_id: item.id).first.quantity%></th>
                    <% if current_user.admin? %>
                      <th><a class="btn btn-mini btn-danger" href="#myModalDelete<%= item.id %>" role="button" class="remove-one-item" data-toggle="modal"><i class="icon-trash"></i></a></th>
                      <th><a class="btn btn-mini btn-warning" href="/<%=ch.id%>/<%=order.id%>/<%=item.id%>/move_item"><i class="icon-cog"></i></a></th>
                    <% end %>
                  </tr>
                <% end %>
              </tbody>
            </table>
            <h5>Order <%= @counter %> total: <%= order.total %></h5><br>
          <% end %>
          <br>
            <h4>total of cheque before taxes: <%= ch.sum %></h4>
            <h4>total of cheque after taxes: <%= ch.sum + (ch.sum * (ch.taxrate + 0.00) * 0.01) %></h4>
          <div style="text-align:center;">
            <a class="btn btn-large btn-primary" href="/2/<%= @tid %>/new_order">Add Order</a>
            <% if ch.dataAdded == false %>
              <a class="btn btn-large btn-primary" href="/<%= ch.id %>/add_data">Close Cheque</a>
            <% else %>
              <a class="btn btn-large btn-primary" href="/<%= ch.id %>/close_cheque">Close Cheque</a>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
  <br><br><br>
  <div style="text-align:center;">
    <a class="btn btn-large btn-primary" href="/1/<%= @tid %>/new_order">Add cheque</a>
    <a class="btn btn-large" href="/tables">back</a>
  </div>
<% else %>
<br><br><br>
	<div style="text-align:center;">
		<a class="btn btn-large btn-primary" href="/1/<%= @tid %>/new_order">New Cheque</a>
    <a class="btn btn-large" href="/tables">back</a>
	</div>
<% end %>

   <applet name="jzebra" code="jzebra.PrintApplet.class" archive="/jzebra.jar" width="50px" height="50px">
   </applet><br />


